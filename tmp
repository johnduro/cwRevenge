/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   op.c                                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: zaz <marvin@42.fr>                         +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2013/10/04 11:43:01 by zaz               #+#    #+#             */
     Updated: 2015/04/16 15:21:46 by mle-roy          ###   ########.fr         
/*                                                                            */
/* ************************************************************************** */

#include "op.h"

t_op    op_tab[17] =
{
	{"live",  1, {T_DIR}                                              , 1,  10,    "alive",                                  0, 0},
	{"ld",    2, {T_DIR | T_IND, T_REG}                               , 2,  5,     "load",                                   1, 0},
	{"st",    2, {T_REG, T_IND | T_REG}                               , 3,  5,     "store",                                  1, 0},
	{"add",   3, {T_REG, T_REG, T_REG}                                , 4,  10,    "addition",                               1, 0},
	{"sub",   3, {T_REG, T_REG, T_REG}                                , 5,  10,    "soustraction",                           1, 0},
	{"and",   3, {T_REG | T_DIR | T_IND, T_REG | T_IND | T_DIR, T_REG}, 6,  6,     "et (and  r1, r2, r3   r1&r2 -> r3",      1, 0},
	{"or",    3, {T_REG | T_IND | T_DIR, T_REG | T_IND | T_DIR, T_REG}, 7,  6,     "ou  (or   r1, r2, r3   r1 | r2 -> r3",   1, 0},
	{"xor",   3, {T_REG | T_IND | T_DIR, T_REG | T_IND | T_DIR, T_REG}, 8,  6,     "ou (xor  r1, r2, r3   r1^r2 -> r3",      1, 0},
	{"zjmp",  1, {T_DIR}                                              , 9,  20,    "jump if zero",                           0, 1},
	{"ldi",   3, {T_REG | T_DIR | T_IND, T_DIR | T_REG, T_REG}        , 10, 25,    "load index",                             1, 1},
	{"sti",   3, {T_REG, T_REG | T_DIR | T_IND, T_DIR | T_REG}        , 11, 25,    "store index",                            1, 1},
	{"fork",  1, {T_DIR}                                              , 12, 800,   "fork",                                   0, 1},
	{"lld",   2, {T_DIR | T_IND, T_REG}                               , 13, 10,    "long load",                              1, 0},
	{"lldi",  3, {T_REG | T_DIR | T_IND, T_DIR | T_REG, T_REG}        , 14, 50,    "long load index",                        1, 1},
	{"lfork", 1, {T_DIR}                                              , 15, 1000,  "long fork",                              0, 1},
	{"aff",   1, {T_REG}                                              , 16, 2,     "aff",                                    1, 0},
	{0, 0, {0}, 0, 0, 0, 0, 0}
};

GRP :
T_DIR(4) : live, zjmp, fork, lfork
T_DIR | T_IND, T_REG(2) : ld, lld
T_REG, T_IND | T_REG(1) : st
T_REG, T_REG, T_REG(2) : add, sub
T_REG | T_DIR | T_IND, T_REG | T_IND | T_DIR, T_REG(3) : and, or, xor
T_REG | T_DIR | T_IND, T_DIR | T_REG, T_REG(2) : ldi, lldi
T_REG, T_REG | T_DIR | T_IND, T_DIR | T_REG(1) : sti
T_REG(1) : aff
// ld : 02 02
// and 1, r1, r1

typedef int(*t_builtin_ptr)(char **, char ***);

typedef struct		s_builtin
{
	char			*name;
	t_builtin_ptr	fn;
}					t_builtin;

t_builtin*get_builtin(void)
{
	static t_builting_builtin[] =

	{
		{"exit", &sh_exit},
		{"cd", &sh_cd},
		{"env", &sh_env},
		{"setenv", &sh_setenv},
		{"unsetenv", &sh_unsetenv},
		{"echo", &sh_echo},
		{"heredoc_builtin_sh", &sh_heredoc},
		{"history", &sh_history},
		{"export", &sh_export},
		{"help", &sh_help},
		{"42sh", &sh_script},
		{"!", &sh_exclam},
		{NULL, NULL}
	};
	return (g_builtin);
}

REG 1
DIR 2 ('%')
IND 3

06 54 01 01 01
06 D4 00 01 01 01

int = 0
i += REG_CODE
i <<= 2
i += REG_CODE
i<<= 2
i += REG_CODE
i <<= 2

// stocker l'octet de codage sur un int_8 (?) avec trois decalage binaire de 2 (<< 2), et += REG_CODE par argument
// r2, 23, %34


 1 2 3 4 5 6 7 8 9 0
     ^         ^
